name: Docker Container Image Build

on:
  push:
    branches: master
    tags: v*.*.*

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=$GITHUB_REPOSITORY_OWNER/${GITHUB_REPOSITORY#*docker-}
          VERSION=github-ci
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=build_date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push to local registry
        uses: docker/build-push-action@v2
        with:
          push: ${{ startsWith(github.ref, 'refs/tags/v') }}
          tags: ${{ steps.prep.outputs.tags }}

      - name: Inspect
        run: |
          docker buildx imagetools inspect localhost:5000/{{ steps.prep.outputs.docker_image }}:latest

      - name: Docker Hub Description
        if: ${{ success() && startsWith(github.ref, 'refs/tags/') }}
        # https://github.com/marketplace/actions/docker-hub-description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ steps.prep.outputs.docker_image }}
          readme-filepath: DOCKERHUB.md

      - name: Pushover Notification
        if: ${{ always() }}
        # https://github.com/marketplace/actions/github-action-for-pushover-notifications
        uses: desiderati/github-action-pushover@v1
        with:
          job-status: ${{ job.status }}
          pushover-api-token: ${{ secrets.PUSHOVER_API_TOKEN }}
          pushover-user-key: ${{ secrets.PUSHOVER_USER_KEY }}

      - name: MicroBadger Webhook
        if: ${{ success() && startsWith(github.ref, 'refs/tags/') }}
        # https://github.com/marketplace/actions/webhook-action
        uses: joelwmale/webhook-action@master
        with:
          url: ${{ secrets.MICROBADGER_WEBHOOK_URL }}





#      - name: Checkout
#        # https://github.com/marketplace/actions/checkout
#        uses: actions/checkout@v2
#
#      - name: Build Image
#        # https://github.com/marketplace/actions/customizable-docker-buildx
#        uses: ilteoood/docker_buildx@v1
#        with:
#          imageName: ${{ steps.prepare.outputs.docker_image_name }}
#          tag: ${{ steps.prepare.outputs.docker_image_tags }}
#          buildArg: DOCKER_IMAGE_VERSION=${{ steps.prepare.output.docker_image_version }}
#          platform: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/386,linux/ppc64le,linux/s390x
#          publish: ${{ startsWith(github.ref, 'refs/tags/') }}
#          dockerHubUser: ${{ secrets.DOCKERHUB_USERNAME }}
#          dockerHubPassword: ${{ secrets.DOCKERHUB_PASSWORD }}

      # https://github.com/crazy-max/ghaction-docker-buildx
#      - name: Set up Docker Buildx
#        uses: crazy-max/ghaction-docker-buildx@v1
#        with:
#          version: latest

#      - name: Docker Buildx (no push)
#        run: |
#          docker buildx build --platform ${{ steps.prepare.outputs.docker_platforms }} \
#            --output "type=image,push=false" \
#            --build-arg "BUILD_DATE=${{ steps.prepare.outputs.build_date }}" \
#            --build-arg "VCS_REF=${GITHUB_SHA::8}" \
#            --build-arg "VERSION=${{ steps.prepare.outputs.version }}" \
#            --tag "${{ steps.prepare.outputs.docker_image }}:latest" \
#            --tag "${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}" \
#            --file Dockerfile .

#      - name: Docker Login
#        if: success() && startsWith(github.ref, 'refs/tags/')
#        env:
#          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
#        run: |
#          echo "${DOCKER_PASSWORD}" | docker login --username "${{ steps.prepare.outputs.docker_username }}" --password-stdin

#      - name: Docker Buildx (push)
#        if: success() && startsWith(github.ref, 'refs/tags/')
#        run: |
#          docker buildx build --platform ${{ steps.prepare.outputs.docker_platforms }} \
#            --output "type=image,push=true" \
#            --build-arg "BUILD_DATE=${{ steps.prepare.outputs.build_date }}" \
#            --build-arg "VCS_REF=${GITHUB_SHA::8}" \
#            --build-arg "VERSION=${{ steps.prepare.outputs.version }}" \
#            --tag "${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}" \
#            --tag "${{ steps.prepare.outputs.docker_image }}:latest" \
#            --file Dockerfile .

#      - name: Docker Check Manifest
#        if: success() && startsWith(github.ref, 'refs/tags/')
#        run: |
#          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image_name }}:v${{ steps.prepare.outputs.idocker_image_version }}

#      - name: Clear
#        if: always() && startsWith(github.ref, 'refs/tags/')
#        run: |
#          rm -f ${HOME}/.docker/config.json

