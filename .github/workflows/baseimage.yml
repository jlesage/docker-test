name: Docker Baseimage CI

env:
  DOCKER_IMAGE: jlesage/test

on:
  push:
    branches: '*'
    tags: v*.*.*
  pull_request:

jobs:
  build:
    name: Build image
    runs-on: ubuntu-latest

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    strategy:
      fail-fast: false
      matrix:
        info:
          - '{ "tag_prefix": "alpine-3.6",        "baseimage": "alpine:3.6",          "platforms": "linux/amd64,linux/386,linux/arm/v6,linux/arm64/v8" }'
          - '{ "tag_prefix": "alpine-3.7",        "baseimage": "alpine:3.7",          "platforms": "linux/amd64,linux/386,linux/arm/v6,linux/arm64/v8" }'
          - '{ "tag_prefix": "alpine-3.8",        "baseimage": "alpine:3.8",          "platforms": "linux/amd64,linux/386,linux/arm/v6,linux/arm64/v8" }'
          - '{ "tag_prefix": "alpine-3.9",        "baseimage": "alpine:3.9",          "platforms": "linux/amd64,linux/386,linux/arm/v6,linux/arm/v7,linux/arm64/v8" }'
          - '{ "tag_prefix": "alpine-3.10",       "baseimage": "alpine:3.10",         "platforms": "linux/amd64,linux/386,linux/arm/v6,linux/arm/v7,linux/arm64/v8" }'
          - '{ "tag_prefix": "alpine-3.11",       "baseimage": "alpine:3.12",         "platforms": "linux/amd64,linux/386,linux/arm/v6,linux/arm/v7,linux/arm64/v8" }'
          - '{ "tag_prefix": "alpine-3.12",       "baseimage": "alpine:3.12",         "platforms": "linux/amd64,linux/386,linux/arm/v6,linux/arm/v7,linux/arm64/v8" }'
          - '{ "tag_prefix": "alpine-3.6-glibc",  "baseimage": "alpine:3.6",          "platforms": "linux/amd64,linux/386,linux/arm/v6,linux/arm64/v8" }'
          - '{ "tag_prefix": "alpine-3.7-glibc",  "baseimage": "alpine:3.7",          "platforms": "linux/amd64,linux/386,linux/arm/v6,linux/arm64/v8" }'
          - '{ "tag_prefix": "alpine-3.8-glibc",  "baseimage": "alpine:3.8",          "platforms": "linux/amd64,linux/386,linux/arm/v6,linux/arm64/v8" }'
          - '{ "tag_prefix": "alpine-3.9-glibc",  "baseimage": "alpine:3.9",          "platforms": "linux/amd64,linux/386,linux/arm/v6,linux/arm/v7,linux/arm64/v8" }'
          - '{ "tag_prefix": "alpine-3.10-glibc", "baseimage": "alpine:3.10",         "platforms": "linux/amd64,linux/386,linux/arm/v6,linux/arm/v7,linux/arm64/v8" }'
          - '{ "tag_prefix": "alpine-3.11-glibc", "baseimage": "alpine:3.11",         "platforms": "linux/amd64,linux/386,linux/arm/v6,linux/arm/v7,linux/arm64/v8" }'
          - '{ "tag_prefix": "alpine-3.12-glibc", "baseimage": "alpine:3.12",         "platforms": "linux/amd64,linux/386,linux/arm/v6,linux/arm/v7,linux/arm64/v8" }'
          - '{ "tag_prefix": "debian-8",          "baseimage": "debian:jessie-slim",  "platforms": "linux/amd64,linux/386,linux/arm/v5,linux/arm/v7" }'
          - '{ "tag_prefix": "debian-9",          "baseimage": "debian:stretch-slim", "platforms": "linux/amd64,linux/386,linux/arm/v5,linux/arm/v7,linux/arm64/v8" }'
          - '{ "tag_prefix": "debian-10",         "baseimage": "debian:buster-slim",  "platforms": "linux/amd64,linux/386,linux/arm/v5,linux/arm/v7,linux/arm64/v8" }'
          - '{ "tag_prefix": "ubuntu-16.04",      "baseimage": "ubuntu:xenial",       "platforms": "linux/amd64,linux/386,linux/arm/v7,linux/arm64/v8" }'
          - '{ "tag_prefix": "ubuntu-18.04",      "baseimage": "ubuntu:bionic",       "platforms": "linux/amd64,linux/386,linux/arm/v7,linux/arm64/v8" }'
          - '{ "tag_prefix": "ubuntu-20.04",      "baseimage": "ubuntu:focal",        "platforms": "linux/amd64,linux/arm/v7,linux/arm64/v8" }'

    steps:
      - name: Prepare
        id: prep
        run: |
          # Determine the Docker container version.
          VERSION=unknown
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          else
            echo "::error::Unexpected GITHUB_REF: $GITHUB_REF"
            exit 1
          fi
          # Determine the version to put in container label.
          LABEL_VERSION=${VERSION}
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            LABEL_VERSION=${VERSION:1}
          fi
          # Determine the Docker container tags.
          TAGS="${{ env.DOCKER_IMAGE }}:${{ fromJSON(matrix.info).tag_prefix }}-${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${{ env.DOCKER_IMAGE }}:${{ fromJSON(matrix.info).tag_prefix }}-${MINOR}"
            TAGS="$TAGS,${{ env.DOCKER_IMAGE }}:${{ fromJSON(matrix.info).tag_prefix }}-${MAJOR}"
            TAGS="$TAGS,${{ env.DOCKER_IMAGE }}:${{ fromJSON(matrix.info).tag_prefix }}"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${{ env.DOCKER_IMAGE }}:${{ fromJSON(matrix.info).tag_prefix }}-sha-${GITHUB_SHA::8}"
          fi
          # Determine the Dockerfile to use.
          if [[ "${{ fromJSON(matrix.info).tag_prefix }}" =~ alpine-* ]]; then
            if [[ "${{ fromJSON(matrix.info).tag_prefix }}" =~ *-glibc ]]; then
              DOCKERFILE=Dockerfile.alpine-glibc
            else
              DOCKERFILE=Dockerfile.alpine
            fi
          else
            DOCKERFILE=Dockerfile.debian
          fi
          # Export outputs.
          echo ::set-output name=dockerfile::${DOCKERFILE}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=label_version::${LABEL_VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=build_date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=platforms::linux/amd64,linux/386,linux/arm/v6,linux/arm/v7,linux/arm64/v8

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup BATS
        uses: mig4/setup-bats@v1

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push to local registry
        uses: docker/build-push-action@v2
        with:
          push: true
          file: ${{ steps.prep.outputs.dockerfile }}
          platforms: ${{ fromJSON(matrix.info).platforms }}
          tags: localhost:5000/${{ env.DOCKER_IMAGE }}:github-ci
          build-args: |
            BASEIMAGE=${{ fromJSON(matrix.info).baseimage }}
            IMAGE_VERSION=${{ steps.prep.outputs.label_version }}

      - name: Inspect
        id: inspect
        run: |
          docker buildx imagetools inspect localhost:5000/${{ env.DOCKER_IMAGE }}:github-ci
          echo ::set-output name=raw::$(docker buildx imagetools inspect --raw localhost:5000/${{ env.DOCKER_IMAGE }}:github-ci)

      - name: Test image
        run: |
          for SHA in ${{ join(fromJSON(steps.inspect.outputs.raw).manifests.*.digest, ' ') }}
          do
            DOCKER_IMAGE=localhost:5000/${{ env.DOCKER_IMAGE }}:github-ci@$SHA
            docker pull $DOCKER_IMAGE
            echo "Testing $DOCKER_IMAGE..."
            bats tests
          done

      - name: Build and push to Dockerhub
        # NOTE: The `--load` option of `buildx` only works with a single
        #       platform.  Thus, we cannot build the image with `--load`, test
        #       the image and then `docker push` it.  We need to build the image
        #       twice, with different tags.  The second build should however
        #       be very fast because of cache.  See:
        #         - https://github.com/docker/buildx/issues/59
        #         - https://github.com/docker/build-push-action/issues/132
        if: ${{ success() && startsWith(github.ref, 'refs/tags/') }}
        uses: docker/build-push-action@v2
        with:
          push: true
          file: ${{ steps.prep.outputs.dockerfile }}
          platforms: ${{ fromJSON(matrix.info).platforms }}
          tags: ${{ steps.prep.outputs.tags }}
          build-args: |
            BASEIMAGE=${{ fromJSON(matrix.info).baseimage }}
            IMAGE_VERSION=${{ steps.prep.outputs.label_version }}

      - name: MicroBadger webhook
        if: ${{ success() && startsWith(github.ref, 'refs/tags/') }}
        # https://github.com/marketplace/actions/webhook-action
        uses: joelwmale/webhook-action@master
        with:
          url: ${{ secrets.MICROBADGER_WEBHOOK_URL }}

  post-build:
    name: Post-build
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Dockerhub description
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        # https://github.com/marketplace/actions/docker-hub-description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ env.DOCKER_IMAGE }}
          readme-filepath: DOCKERHUB.md

  notification:
    name: Notification
    needs: [ build, post-build ]
    runs-on: ubuntu-latest
    if: ${{ always() }}

    steps:
      - name: Pushover notification
        # https://github.com/marketplace/actions/github-action-for-pushover-notifications
        uses: desiderati/github-action-pushover@v1
        with:
          job-status: ${{ needs.build.result }}
          pushover-api-token: ${{ secrets.PUSHOVER_API_TOKEN }}
          pushover-user-key: ${{ secrets.PUSHOVER_USER_KEY }}
